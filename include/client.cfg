[gcode_macro PRINT_START]
gcode:
    M140 S{params.BED}          #set bed temperature and wait
    M190 S{params.BED}          #set bed temperature and do not wait
    M109 S{params.EXTRUDER}     #set hotend temperature and wait

    G32
    #DETACH_PROBE
	#nozzle_clean		        #clean nozzle
    G1 X-8 Y114 F12000          #go to purge location
   	G91  					    #relative positioning
	G0 E30 F400			        #extrude filament to get better blob on end
	G0 E-0.3 F1800  		    #retract additional filament to move out of melt zone
	G90 					    #absolute positioning
    Wipe_Nozzle

   	#purge line gcode
    #G1 X30 Y5 Z0.4 F10000
    #G1 X150 E40 F1000
    #G1 Y6 
	#G1 X30 E40 F1000
	#G92 E0.0                    #set extruder to Zero
    #G90                         #set to absolute

#	macro to level the gantry.  use G32 in the terminal to call
[gcode_macro G32]
gcode:
    SET_GCODE_OFFSET Z=0
    SET_VELOCITY_LIMIT ACCEL=11000 ACCEL_TO_DECEL=11000
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=9
#    _HOME_X
#    _HOME_Y
	G28 # Z
    Z_TILT_ADJUST	;adjust bed so its square to gantry
	BED_MESH_CALIBRATE ;Run Bed Mesh

[gcode_macro prime_line_regular]
gcode:
	G1 Z20 F6000
    G1 X105 Y5 F12000
    G1 Z0.5 F600
    G1 X20 E30 F1200
    G1 Y6 
	G1 X105 E30 F1200
	G1 X115 E2.5 F1200
	G92 E0.0                    #set extruder to Zero
    G92 Z0.5                    #let printer know its at 0.5
    G90                         #set to absolute

#    Use print_end for you slicer ending script    
[gcode_macro PRINT_END]
gcode:
	G91  						#relative positioning
	G0 E-0.3 F4800  			#retract 0.3mm of filament
	G0 Z+1.00 X-2 Y-2 F6000  	#short quick move to disengage from print
	G0 Z+5.00  F6000  			#move Z-Axis 1mm away from part
	G90  				        #absolute positioning

	#Go_To_Purge_Location       #move to nozzle scrubber bucket
    #G0 X50 Y50 				#move gantry close to xy min, by nozzle switch in front
    G1 X-8 Y114 F12000          #go to purge location
	G91  					    #relative positioning
	G0 E10 F400			        #extrude filament to get better blob on end
	G0 E-0.3 F1800  		    #retract additional filament to move out of melt zone
	G90 					    #absolute positioning
    Wipe_Nozzle

	M104 S0  				    #turn off hotend
    M140 S0  				    #turn off heatbed

	#z bed placement control for end of print
    SAVE_GCODE_STATE NAME=END_state
    {% if printer.toolhead.position.z|float == printer.configfile.config["stepper_z"]["position_max"]|float %} #if z position = z max do the following
        # do nothing
    {% elif printer.toolhead.position.z|float >= 130|float %}    #if z position >= 130mnm do the following
        G91                     #relative positioning
        G1 Z+10 F600            #move z down 10mm
        G90                     #absolute positioning
    {% else %}  		        #if you dont meet any of the criteria
        G90                     #absolute positioning
        G1 Z130 F600            #move z to 130mm
    {% endif %}
    RESTORE_GCODE_STATE NAME=END_state

	M106 S0  				    #shut off part cooling fans
	M84					    #turn off motors
	CLEAR_PAUSE				    #clear pause state encase it was enabled

#	Macro to execute when canceling a print
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    PRINT_END #execute the print end macro
  	SDCARD_RESET_FILE
  	BASE_CANCEL_PRINT
    TURN_OFF_HEATERS
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=12000
    SET_VELOCITY_LIMIT ACCEL=12000


#	Macro to execute when pausing printer
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

#	Macro to execute when resuming printer
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME


#	Scrubs the nozzle on the brass brush or silicone wiper located in the build chamber


[gcode_macro nozzle_clean]
gcode:
	SAVE_GCODE_STATE NAME=clean_nozzle_state	#store current nozzle location
	Wipe_Nozzle
	RESTORE_GCODE_STATE NAME=clean_nozzle_state MOVE=1 #restore current nozzle location

#   Settings for the nozzle wiper
[gcode_macro Nozzle_Wiper_Variables]
# the values below are for a wiper located at (-8, 125)
variable_purge_x:       -8  # x purge location
variable_purge_y:       114 # y purge location
variable_purge_x_entry: 0   # x entry location before going to the purge location
variable_purge_y_entry: 114 # y entry location before going to the purge location
variable_wipe_dx:       0   # distance to move in x from the purge position in order to wipe
variable_wipe_dy:       16  # distance to move in y from the purge position in order to wipe
variable_wipe_count:    7   # number of wipe cycles
variable_travel_speed:  300 # how fast travel speeds will be performed
variable_entry_speed:   100 # how fast to move from the entry location to the purge location
variable_wipe_speed:    50  # how fast to move when wiping
variable_purge_speed:   7   # how fast to extrude in mm/s when purging
variable_purge_fan:     64  # default fan speed out of 255 when purging
variable_wipe_fan:      128 # default fan speed out of 255 when wiping
gcode:

#   Move above the purge bucket
[gcode_macro Go_To_Purge_Location]
gcode:
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set St = printer["gcode_macro Nozzle_Wiper_Variables"].travel_speed * 60 %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}

    SAVE_GCODE_STATE NAME=Go_To_Purge_Location_state
    G90

    {% if not (printer.toolhead.position.x == Px and printer.toolhead.position.y == Py) %}
        G1 X{Pxe} Y{Pye} F{St}
        G1 X{Px} Y{Py} F{Se}
    {% endif %}

    RESTORE_GCODE_STATE NAME=Go_To_Purge_Location_state

#   Wipe the nozzle on the brass brush or silicone wiper
[gcode_macro Wipe_Nozzle]
# params:
#   OLD_FAN_SPEED
gcode:
    {% set OLD_FAN_SPEED = params.OLD_FAN_SPEED|default(-1)|int %}
    {% set Px = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x|float %}
    {% set Py = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y|float %}
    {% set Pxe = printer["gcode_macro Nozzle_Wiper_Variables"].purge_x_entry|float %}
    {% set Pye = printer["gcode_macro Nozzle_Wiper_Variables"].purge_y_entry|float %}
    {% set Wdx = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dx|float %}
    {% set Wdy = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_dy|float %}
    {% set Wc = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_count|int %}
    {% set Se = printer["gcode_macro Nozzle_Wiper_Variables"].entry_speed * 60 %}
    {% set Sw = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_speed * 60 %}
    {% set Sf = printer["gcode_macro Nozzle_Wiper_Variables"].wipe_fan %}
    
    {% if OLD_FAN_SPEED == -1 %}
        {% set old_Sf = printer.fan.speed %}
    {% else %}
        {% set old_Sf = OLD_FAN_SPEED %}
    {% endif %}
    
    {% if printer.fan.speed < Sf %}
        {% set wait_for_fan = True %}
    {% else %}
        {% set wait_for_fan = False %}
    {% endif %}

    SAVE_GCODE_STATE NAME=Wipe_Nozzle_state
    G90

    # go to purge location
    Go_To_Purge_Location

    # set fan speed for wiping
    M106 S{Sf}
    
    # wait for fan to cool filament if needed
    {% if wait_for_fan %}
        G4 P800
    {% endif %}

    # wipe nozzle
    G1 X{Px + Wdx} Y{Py + Wdy} F12000
    {% for i in range(Wc) %}
        G1 X{Px} Y{Py} F{Sw}
        G1 X{Px + Wdx} Y{Py + Wdy} F{Sw}
    {% endfor %}

    # move away from wiper
    G1 X{Pxe + Wdx} Y{Pye + Wdy} F{Se}

    # restore fan speed
    M106 S{old_Sf}

    RESTORE_GCODE_STATE NAME=Wipe_Nozzle_state

#   Purge material into the bucket
[gcode_macro Purge]
description: Extrude into the purge bucket and wipe the nozzle
# params:
#   EXACT_TEMP:     whether to cool to specified temperature if already above it
#   TEMPERATURE:    minimum extruder temperature before purging
#   FEED_AMOUNT:    length of material in mm to purge
#   MAX_FEED:       max extrude length for a single purge strip. Set to -1 to disable length limit.
gcode:
    {% set EXACT_TEMP = params.EXACT_TEMP|default(False) %}
    {% set TEMPERATURE = params.TEMPERATURE|default(230.0)|float %}
    {% set FEED_AMOUNT = params.FEED_AMOUNT|default(20.0)|float %}
    {% set MAX_FEED = params.MAX_FEED|default(8.0)|float %}

    {% set Sp = printer["gcode_macro Nozzle_Wiper_Variables"].purge_speed * 60 %}
    {% set Sf = printer["gcode_macro Nozzle_Wiper_Variables"].purge_fan %}
    {% set old_Sf = printer.fan.speed %}

    SAVE_GCODE_STATE NAME=Purge_state

    # make sure FEED_AMOUNT is at least 3 to avoid negative E movements
    {% if FEED_AMOUNT < 3 %}
        {% set FEED_AMOUNT = 3 %}
    {% endif %}
    
    # go to purge location
    Go_To_Purge_Location

    # wait for hotend
    {% if EXACT_TEMP|lower == 'true' or printer.extruder.temperature < TEMPERATURE %}
        M109 S{TEMPERATURE}
    {% endif %}

    # set fan speed for purging
    M106 S{Sf}

    # relative extrusion
    M83

    # if extrude length is unlimited, purge a single strip
    {% if MAX_FEED == -1 %}
        # extrude
        G1 E{FEED_AMOUNT - 3} F{Sp}
        G1 E3 F100

    # else purge multiple smaller strips
    {% else %}
        {% for i in range(((FEED_AMOUNT - 3) / MAX_FEED)|int) %}
            # go to purge location
            Go_To_Purge_Location
            
            # extrude
            G1 E{MAX_FEED - 3} F{Sp}
            G1 E3 F100

            # wait
            G4 P800

            # wipe the nozzle
            Wipe_Nozzle OLD_FAN_SPEED={Sf}
        {% endfor %}

        # purge remainder
        {% set remainder = (FEED_AMOUNT - 3)|int % MAX_FEED|int %}
        Go_To_Purge_Location
        G1 E{remainder} F{Sp}
        G1 E3 F100
    {% endif %}

    # reset E position
    G92 E0.0

    # wait
    G4 P800

    # wipe the nozzle
    Wipe_Nozzle OLD_FAN_SPEED={old_Sf}

    RESTORE_GCODE_STATE NAME=Purge_state

#	Macro for M600 - filament out pause resume 
[gcode_macro M600]
# params:
#   X
#   Y
#   Z
gcode:
    {% set X = params.X|default(40) %}
    {% set Y = params.Y|default(40) %}
    {% set Z = params.Z|default(10) %}

	{% if printer.toolhead.status == "Ready" %}
		# do nothing
	{% else %}
    	M117 Filament Change
		SAVE_GCODE_STATE NAME=M600_state
    	PAUSE
		G91
		G1 E-5 F4000
		G1 Z{Z}
		G90
		G1 X{X} Y{Y} F3000
		G0 E15 F1800			#extrude filament to get better blob on end
		G0 E-500 F4800  		#retract additional filament to move out of melt zone
		RESTORE_GCODE_STATE NAME=M600_state
	{% endif %}

#	Use this command to load filament during a mid print filament swap	
[gcode_macro SWAP_RESUME] 
gcode:
 	M117 Printing...
	LOAD_FILAMENT
	RESUME

#	Macro to Turn Fans Off
[gcode_macro turn_fans_off]
gcode:
	M107

#	Redefine M204 gcode to properly accel_to_decel when called instead of keeping default through the print
[gcode_macro M204]
rename_existing: M204.1
gcode:

   {% if 'P' in params %}{% set accel = params.P %}{% endif %}
   {% if 'S' in params %}{% set accel = params.S %}{% endif %}
   {% if 'T' in params %}{% set accel = params.T %}{% endif %}

    SET_VELOCITY_LIMIT ACCEL={ accel } ACCEL_TO_DECEL={ accel|float / 2.0}
